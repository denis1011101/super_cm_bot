package handlers

import (
	"crypto/rand"
	"database/sql"
	"fmt"
	"log"
	"math/big"
	mathrand "math/rand"

	"github.com/denis1011101/super_cm_bot/app"
	messagegenerators "github.com/denis1011101/super_cm_bot/app/handlers/message_generators"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// mass —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –≤ –≥—Ä–∞–º–º–∞—Ö 130..140 –≥—Ä–∞–º–º
func averagePenMass() (int, error) {
    nBig, err := rand.Int(rand.Reader, big.NewInt(11)) // 0..10
    if err != nil {
        return 0, err
    }
    return int(nBig.Int64()) + 130, nil // 130..140
}

// –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è
func kineticEnergy(velocity int) (int, error) {
    mass, err := averagePenMass()
    if err != nil {
        return 0, err
    }
    return int(0.5 * float64(mass) * float64(velocity*velocity)), nil
}

// –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è
func potentialEnergy(height int) (int, error) {
    mass, err := averagePenMass()
    if err != nil {
        return 0, err
    }
    const g = 9.81
    return int(float64(mass) * g * float64(height)), nil
}

// voltage —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ 1..100 –º–∏–ª–ª–∏–≤–æ–ª—å—Ç
func averageVoltage() (int, error) {
    nBig, err := rand.Int(rand.Reader, big.NewInt(100)) // 0..99
    if err != nil {
        return 0, err
    }
    return int(nBig.Int64()) + 1, nil // 1..100
}

// –ó–∞–∫–æ–Ω –û–º–∞
func ohmLaw(resistance int) (int, error) {
    voltage, err := averageVoltage()
    if err != nil {
        return 0, err
    }
    if resistance == 0 {
        return 0, fmt.Errorf("resistance can't be zero")
    }
    return voltage / resistance, nil
}

func ChooseGiga(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	exists, err := app.UserExists(db, userID, chatID)
	if err != nil {
		log.Printf("Error checking if user exists: %v", err)
		return
	}

	if !exists {
		// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		log.Printf("User not found in database, registering: %v", userID)
		registerBot(update, bot, db, true)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	lastUpdate, err := app.GetGigaLastUpdateTime(db, chatID)
	if err != nil {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	shouldReturn := checkIsSpinNotLegal(lastUpdate)
	if shouldReturn { // TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –°–µ–≥–æ–¥–Ω—è –∞–ª—å—Ñ–∞ —Å–∞–º–µ—Ü @%s –∏ –Ω–∏–∫—Ç–æ –µ–≥–æ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç!
		app.SendMessage(chatID, "–ú–æ–≥—É —Ç–æ–ª—å–∫–æ –ø–æ –≥—É–±–∞–º –ø–æ–≤–æ–¥–∏—Ç—å. –ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ...", bot, update.Message.MessageID)
		return
	}

	// –ü—Ä–æ–≤–æ–¥–∏–º —Ä–æ–ª–ª –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –≥–∏–≥–∞—á–∞–¥–∞ –¥–Ω—è
	if app.SpinSkipAction() {
		if err := app.UpdateGigaLastUpdate(db, chatID); err != nil {
			log.Printf("Error updating giga last update: %v", err)
		}
		message := messagegenerators.GetSkipGigaMessage()
		app.SendMessage(chatID, message, bot, update.Message.MessageID)
		return
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ penNames –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Member
	members, err := app.GetPenNames(db, chatID)
	if err != nil {
		log.Printf("Error getting pen names: %v", err)
		return
	}

	if len(members) <= 1 {
		app.SendMessage(chatID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ–Ω–∏—Å–æ–≤ –≤ —á–∞—Ç–µ üíÖ", bot, update.Message.MessageID)
		return
	}

	// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	randomMember := app.SelectRandomMember(members)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ–Ω–∏—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	pen, err := app.GetUserPen(db, randomMember.ID, chatID)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Printf("No pen size found for tg_pen_id: %d in chat_id: %d", randomMember.ID, chatID)
		} else {
			log.Printf("Error getting current pen size: %v", err)
		}
		return
	}
	log.Printf("Current pen size for tg_pen_id %d in chat_id %d: %d", randomMember.ID, chatID, pen.Size)

	// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
	result := app.SpinAddPenSize(pen)

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ä–º—É–ª—É: 0 - kinetic, 1 - potential, 2 - ohm
    formula := mathrand.Intn(3)
    var addSize int
	var formulaName string
	switch formula {
		case 0:
			// kineticEnergy: velocity –æ—Ç 0 –¥–æ 5, —Å—Ä–µ–¥–Ω–µ–µ addSize ‚âà 9
			velocity := result.Size % 6
			raw, err := kineticEnergy(velocity)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ kineticEnergy: %v", err)
				addSize = 0
			} else {
				addSize = raw / 70 // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É, —á—Ç–æ–±—ã —Å—Ä–µ–¥–Ω–µ–µ –±—ã–ª–æ –±–ª–∏–∂–µ –∫ 10
			}
			formulaName = "kineticEnergy"
		case 1:
			// potentialEnergy: height –æ—Ç 0 –¥–æ 5, —Å—Ä–µ–¥–Ω–µ–µ addSize ‚âà 10
			height := result.Size % 6
			raw, err := potentialEnergy(height)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ potentialEnergy: %v", err)
				addSize = 0
			} else {
				addSize = raw / 330 // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É, —á—Ç–æ–±—ã —Å—Ä–µ–¥–Ω–µ–µ –±—ã–ª–æ –±–ª–∏–∂–µ –∫ 10
			}
			formulaName = "potentialEnergy"
		case 2:
			// ohmLaw: resistance –æ—Ç 0 –¥–æ 5 (0 –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 1), —Å—Ä–µ–¥–Ω–µ–µ addSize ‚âà 8
			resistance := result.Size % 6
			if resistance == 0 {
				resistance = 1 // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
			}
			raw, err := ohmLaw(resistance)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ ohmLaw: %v", err)
				addSize = 0
			} else {
				addSize = int(raw / 2) // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É, —á—Ç–æ–±—ã —Å—Ä–µ–¥–Ω–µ–µ –±—ã–ª–æ –±–ª–∏–∂–µ –∫ 10
			}
			formulaName = "ohmLaw"
	}

	addSize = min(addSize, 15)
	addSize = max(addSize, 0)

	log.Printf("Calculated addSize: %d (formula #%d: %s)", addSize, formula, formulaName)
	
	newSize := pen.Size + addSize

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–ª–µ–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É –≤—ã–∏–≥—Ä–∞–≤—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	app.UpdateGiga(db, newSize, randomMember.ID, chatID)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏ –¥–ª—è —á–∞—Ç–∞
	message := messagegenerators.GetRandomGigaMessage(randomMember.Name, addSize, newSize)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ "–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞"
	app.SendMessage(chatID, message, bot, update.Message.MessageID)
}
