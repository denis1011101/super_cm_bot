package handlers

import (
	"database/sql"
	"log"

	"github.com/denis1011101/super_cm_bot/app"
	messagegenerators "github.com/denis1011101/super_cm_bot/app/handlers/message_generators"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func ChooseGiga(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	userID := update.Message.From.ID
	chatID := update.Message.Chat.ID

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	exists, err := app.UserExists(db, userID, chatID)
	if err != nil {
		log.Printf("Error checking if user exists: %v", err)
		return
	}

	if !exists {
		// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		log.Printf("User not found in database, registering: %v", userID)
		registerBot(update, bot, db, true)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	lastUpdate, err := app.GetGigaLastUpdateTime(db, chatID)
	if err != nil {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	shouldReturn := checkIsSpinNotLegal(lastUpdate)
	if shouldReturn { // TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –°–µ–≥–æ–¥–Ω—è –∞–ª—å—Ñ–∞ —Å–∞–º–µ—Ü @%s –∏ –Ω–∏–∫—Ç–æ –µ–≥–æ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç!
		app.SendMessage(chatID, "–ú–æ–≥—É —Ç–æ–ª—å–∫–æ –ø–æ –≥—É–±–∞–º –ø–æ–≤–æ–¥–∏—Ç—å. –ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ...", bot, update.Message.MessageID)
		return
	}

	// –ü—Ä–æ–≤–æ–¥–∏–º —Ä–æ–ª–ª –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –≥–∏–≥–∞—á–∞–¥–∞ –¥–Ω—è
	if app.SpinSkipAction() {
		if err := app.UpdateGigaLastUpdate(db, chatID); err != nil {
			log.Printf("Error updating giga last update: %v", err)
		}
		message := messagegenerators.GetSkipGigaMessage()
		app.SendMessage(chatID, message, bot, update.Message.MessageID)
		return
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ penNames –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Member
	members, err := app.GetPenNames(db, chatID)
	if err != nil {
		log.Printf("Error getting pen names: %v", err)
		return
	}

	if len(members) <= 1 {
		app.SendMessage(chatID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ–Ω–∏—Å–æ–≤ –≤ —á–∞—Ç–µ üíÖ", bot, update.Message.MessageID)
		return
	}

	// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	randomMember := app.SelectRandomMember(members)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–µ–Ω–∏—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	pen, err := app.GetUserPen(db, randomMember.ID, chatID)
	if err != nil {
		if err == sql.ErrNoRows {
			log.Printf("No pen size found for tg_pen_id: %d in chat_id: %d", randomMember.ID, chatID)
		} else {
			log.Printf("Error getting current pen size: %v", err)
		}
		return
	}
	log.Printf("Current pen size for tg_pen_id %d in chat_id %d: %d", randomMember.ID, chatID, pen.Size)

	// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
	result := app.SpinAddPenSize(pen)
	doubledSize := result.Size * 2
	newSize := pen.Size + doubledSize

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–ª–µ–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É –≤—ã–∏–≥—Ä–∞–≤—à–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	app.UpdateGiga(db, newSize, randomMember.ID, chatID)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏ –¥–ª—è —á–∞—Ç–∞
	message := messagegenerators.GetRandomGigaMessage(randomMember.Name, doubledSize, newSize)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ "–∫—Ä–∞—Å–∞–≤—á–∏–∫–∞"
	app.SendMessage(chatID, message, bot, update.Message.MessageID)
}
