package messagegenerators

import (
	"fmt"
	"math/rand"
	"strings"
)

func firstGigaSet(username string, diffSize int, newSize int) string {
	messages := []string{
		"–ñ–∏ –µ—Å—Ç—å! –°—ç–π—á–∞—Å –ø–æ–∏—â–µ–º –∫—Ä–∞–∑–∞–≤—á–∏–∫–∞ ‚òùÔ∏è",
		"–≠—É! –£ –∫–æ–≥–æ –∫–∞–º—Ä–∏ 3.5? üèé",
		"–ú–æ–∂–µ—Ç —Ö–æ—Ç—è–±—ã –ø—Ä–∏–æ—Ä–∞ –µ—Å—Ç—å? üöó",
		"–ü–æ—Ö—É–π. –°—ç–π—á–∞—Å —É –ø–∞—Ü–∞–Ω–æ–≤ –ø–æ—Å–ø—Ä–∞—à–∏–≤–∞—é –∫—Ç–æ? —á—Ç–æ? –∫–∞–∫? ü§∑‚Äç‚ôÇÔ∏è",
		fmt.Sprintf("–í–æ—É –≤–æ—É –≤–æ—É –ø–∞–ø—Ä–∏–≤–µ—Ç—Å–≤—É–π—Ç–µ —Ö–∞—Å–∞–Ω—á–∏–∫–∞ @%s!üî• –¢–≤–æ–π —Ö—É–π —Å—Ç–∞–ª –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ %d —Å–º –¢–µ–ø–µ—Ä—å –æ–Ω %d —Å–º.", username, diffSize, newSize),
	}
	text := strings.Join(messages, "\n")
	return text
}

func secondGigaSet(username string, diffSize int, newSize int) string {
	messages := []string{
		"–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∞–ª—å—Ñ–∞ —Å–∞–º–µ—Ü? ü§®",
		"–≠—Ç–æ—Ç –≤ —Ü–∏—Ä–∫–µ –≤—ã—Å—Ç—É–ø–∞–µ—Ç... üé™",
		"–¢–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å –Ω–µ –º–æ–∂–µ—Ç. –¢—É–ø–æ–π —Å—Å—É–∫–∞.",
		"–ê —É —ç—Ç–æ–≥–æ —Ö—É—è –¥–∞–∂–µ –Ω–µ—Ç üî´",
		fmt.Sprintf("–ê –≤–æ—Ç –∏ –æ–Ω –Ω–∞—à –≤–æ–ª—á–∞—Ä–∞ –∞–ª—å—Ñ–∞ —Å–∞–º–µ—Ü @%s! üê∫üî• –¢–≤–æ–π —Ö—É–π —Å—Ç–∞–ª –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ %d —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %d —Å–º.", username, diffSize, newSize),
	}
	text := strings.Join(messages, "\n")
	return text
}

func thirdGigaSet(username string, diffSize int, newSize int) string {
	messages := []string{
		"–•–º–º... –ö—Ç–æ –∂–µ —Å–µ–≥–æ–¥–Ω—è –≥–∏–≥–∞—á–∞–¥?",
		"–ü—Ä–æ–≤–æ–∂—É —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—é üì∏",
		"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–Ω–∏–º–∫–∏ üìÄ",
		"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üî¨",
		"–°–∏–Ω—Ç–µ–∑–∏—Ä—É—é –î–ù–ö üß¨",
		fmt.Sprintf("@%s –±–ª—è —Ä–µ–∞–ª—å–Ω–æ –≥–∏–≥–∞—á–∞–¥. –¢–≤–æ–π —Ö—É–π —Å—Ç–∞–ª –¥–ª–∏–Ω–Ω–µ–µ –Ω–∞ %d —Å–º. –¢–µ–ø–µ—Ä—å –æ–Ω %d —Å–º.", username, diffSize, newSize),
	}
	text := strings.Join(messages, "\n")
	return text
}

var gigaMesasgeSets []func(username string, diffSize int, newSize int) string = gigaSetsFabric()

func gigaSetsFabric() []func(username string, diffSize int, newSize int) string {
	return []func(username string, diffSize int, newSize int) string{
		firstGigaSet,
		secondGigaSet,
		thirdGigaSet,
	}
}

func GetRandomGigaMessage(username string, diffSize int, newSize int) string {
	spin := rand.Intn(len(gigaMesasgeSets))
	message := gigaMesasgeSets[spin](username, diffSize, newSize)
	return message
}

func GetSkipGigaMessage() string {
	return "–Ø –±–ª—è—Ç—å —Ç—É—Ç –∞–ª—å—Ñ–∞! +10 000 –∫ –º–æ–µ–º—É —Ö—É—é! –¢–∞–∫ —á—Ç–æ –ø–æ—à–ª–∏ –Ω–∞—Ö—É–π üëø"
}
