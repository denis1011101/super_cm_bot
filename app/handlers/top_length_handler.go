package handlers

import (
	"database/sql"
	"fmt"
	"log"
	"strings"

	"github.com/denis1011101/super_cm_bot/app"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TopLengthStruct struct {
	pen_length int    `db:"pen_length"`
	pen_name   string `db:"pen_name"`
	PenComment string
	PenSm      string
}

// TopLength –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "—Ç–æ–ø –¥–ª–∏–Ω–∞"
func TopLength(update tgbotapi.Update, bot *tgbotapi.BotAPI, db *sql.DB) {
	chatID := update.Message.Chat.ID

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –ø–æ –¥–ª–∏–Ω–µ
	stmt, err := db.Prepare(`
		SELECT pen_length, pen_name
		FROM pens 
		WHERE tg_chat_id = ? 
		ORDER BY pen_length DESC 
		LIMIT 10
	`)
	if err != nil {
		log.Printf("Error preparing query statement: %v", err)
		return
	}
	defer func() {
		if closeErr := stmt.Close(); closeErr != nil {
			log.Printf("Error closing statement: %v", closeErr)
		}
	}()

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	rows, err := stmt.Query(chatID)
	if err != nil {
		log.Printf("Error querying top length: %v", err)
		return
	}
	defer func() {
		if closeErr := rows.Close(); closeErr != nil {
			log.Printf("Error closing rows: %v", closeErr)
		}
	}()

	var records []TopLengthStruct
	GiantPenComment := []string{"–ù–∞—Å—Ç–æ—è—â–∏–π –≥–∏–≥–∞—á–∞–¥ —Å –µ–ª–¥–æ–π ", "–ü–æ–ª—É–ø–æ–∫–µ—Ä –Ω–æ —Å –±–æ–ª—å—à–∏–º —Ö—Ä–µ–Ω–æ–º ", "–õ—É—á—à–µ –±—ã—Ç—å —Ç—Ä–µ—Ç—å–∏–º —á–µ–º –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤ —Ü–∏—Ä–∫–µ ", "R—É–∫–æ–ª–¥ —Å "}
	MicroPenComment := "–£ –Ω–µ–≥–æ –ø–∏—Å—É–Ω—å–∫–∞ "
	GiantPenSm := []string{" —Å–º üò±", " —Å–º üí™", " —Å–º üê∫", "—Å–º ü§°"}
	MicroPenSm := " —Å–º ü§°"

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
	for i := 0; rows.Next(); i++ {
		var record TopLengthStruct
		if err := rows.Scan(&record.pen_length, &record.pen_name); err != nil {
			panic(err)
		}

		// –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞
		if i < 4 {
			record.PenComment = GiantPenComment[i]
			record.PenSm = GiantPenSm[i]
		} else {
			record.PenComment = MicroPenComment
			record.PenSm = MicroPenSm
		}

		records = append(records, record)
	}

	// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
	var sb strings.Builder
	sb.WriteString("–¢–æ–ø 10 –ø–æ –¥–ª–∏–Ω–µ –ø–µ–Ω–∏—Å–∞:\n")
	for _, record := range records {
		sb.WriteString(fmt.Sprintf("@%s: %s %d %s\n", record.pen_name, record.PenComment, record.pen_length, record.PenSm))
	}

	message := sb.String()

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	app.SendMessage(chatID, message, bot, update.Message.MessageID)

}
